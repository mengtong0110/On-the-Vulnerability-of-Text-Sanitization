import transformers
transformers.logging.set_verbosity_error()
import os
import json
from SanText import SanText_bayes
import tqdm
from task_set import task,eps_list,init_santext,init_eps
tqdm_eps = tqdm.tqdm(eps_list)

init_santext(task)
with open('sen_words.txt','r') as sen_file:
    sen_words=json.load(sen_file) 


for eps in tqdm_eps:
        init_eps(eps)
        re_eps_dict={}
        with open(f"./data/shadow_datasets/{eps}_{task}.txt",'r') as dic:
                S_list=json.load(dic)
        Input_dict={}
        num_all=len(S_list)
        for i in tqdm.trange(num_all):
                Input_tokens=S_list[i][0]
                for token in Input_tokens:
                    if token in Input_dict.keys():
                        Input_dict[token]+=1
                    else:
                        Input_dict[token] =1 
        Bayes_score_dict={}
        re_dict={}
        for key in tqdm.tqdm(sen_words,desc='sen_words_cal'):
                candidate_tokens=SanText_bayes(key,len(sen_words))
                Bayes_score_list=[]
                Output_Probability=0
                re_dict[key]=[]
                #For each 'Pr(x) + α^(-1)', we multiply it by α. 
                #The attack result is consistent with the original one.
                for token in candidate_tokens:
                        re_dict[key].append(token[0])
                        Posterior_Probability=token[1]                  
                        if(token[0] not in Input_dict.keys()):   
                                Input_num=1
                        else:
                                Input_num=Input_dict[token[0]]+1
                        Bayes_score_list.append(Posterior_Probability*Input_num)       
                sorted_indices = sorted(range(len(Bayes_score_list)), key=lambda x: Bayes_score_list[x], reverse=True)
                re_eps_dict[key] = [re_dict[key][i] for i in sorted_indices]
                re_eps_dict[key] =re_eps_dict[key][:10]
                sorted_bayes_scores = [Bayes_score_list[i] for i in sorted_indices]
                sorted_bayes_scores=sorted_bayes_scores[:10]
                Bayes_score_dict[key]=sorted_bayes_scores
        with open(f'./data/reverse_dict/re_{eps}_dict.txt','w') as R_file:
                json.dump(re_eps_dict, R_file, indent=4)
        with open(f'./data/Scores/Bayes_score/{eps}_{task}.txt','w') as BS_file:
                json.dump(Bayes_score_dict, BS_file, indent=4)
        

              
              

                        
                      

        
               
               