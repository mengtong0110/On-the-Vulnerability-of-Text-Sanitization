import torch
import torch.nn as nn
from nltk.corpus import stopwords
from torch.optim import Adam, lr_scheduler
from torch.utils.data import Dataset, DataLoader
from transformers import BertModel, BertTokenizer
import os
import json
import torch.nn.functional as F
from tqdm import tqdm
import random
from task_set import task,eps_list,init_santext,init_eps
random.seed(42)

with open('sen_words.txt','r') as sen_file:
    sen_words=json.load(sen_file) 


def load_sentence(data_path1,data_path2, categories_s):
    with open(data_path1, 'r', encoding="utf8") as file:
        data_=json.load(file)
    with open(data_path2, 'r', encoding="utf8") as file2:
        data2=json.load(file2)
    test_data = []
    train_data = []
    for san_token in  tqdm(categories_s,desc=f"{task} is loading"):           
        for sample in data_:
            for i in range(len(sample[0])):
                if sample[1][i]==san_token and sample[0][i] in sen_words:
                    BY_c=" "
                    BY_t1=" "
                    BY_t2=" "
                    test_data.append([BY_c,BY_t1,BY_t2,sample[0][i],sample[1][i]])
    random.shuffle(test_data)
    test_data=test_data[:1000]
    return train_data, test_data


for eps in eps_list:
    with open(f'./data/attack_result/Bayes_attack/theorem_{eps}_{task}.txt','w') as R_file:

        total_correct_predictions = 0
        total_evaluated_samples = 0
        data_path1 = f"./data/private_datasets/{eps}_{task}.txt"  
        data_path2 = f"./data/shadow_datasets/theorem_{eps}_{task}.txt"

        with open(f"./data/reverse_dict/theorem_re_{eps}_dict.txt",'r') as Re_file:
                R_dict=json.load(Re_file)
        with open(f"./data/Scores/Bayes_score/theorem_{eps}_{task}.txt",'r') as Rep_file:
                RP_dict=json.load(Rep_file)
        with open('tokens_ctg.txt','r') as file:
            categories_s=json.load(file)

        train_data, test_data= load_sentence(data_path1,data_path2,categories_s)
        
        for sample in tqdm(test_data,desc="Testing"):           
            raw_token=sample[3]
            attack_result= R_dict[sample[4]][0]
            if(raw_token in attack_result):
                total_correct_predictions += 1
            total_evaluated_samples += 1
        print(f"Basic ASR Bound with eps={eps} on {task} is: {total_correct_predictions/total_evaluated_samples:.4f}")
        R_file.write(f'Basic ASR Bound with eps={eps} on {task} is: {total_correct_predictions/total_evaluated_samples:.4f}')